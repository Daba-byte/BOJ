# 태양이 우리 오빠 이름이라서 더 킹받아 황태양 나대지마
def i_dont_like_my_mothers_son(K, farm):
    D = [] # 방향
    L = [] # 길이
    for d, l in farm: # farm: 내가 나눠줄게
        D.append(d)
        L.append(l)

    # 큰 직사각형에서 작은 직사각형을 뺄 거임

    # 가장 긴 가로와 세로 찾기
    max_witdh = L.index(max(L[::2])) # 0, 2, 4 중 가장 큰 값
    max_height = L.index(max(L[1::2])) # 1, 3, 5 중 가장 큰 값

    big_width = L[max_witdh]
    big_height = L[max_height]

    # 가장 작은 가로와 세로 찾기
    small_width = L[(max_witdh + 3) % 6] # 큰 가로에 인접한 가로
    small_height = L[(max_height + 3) % 6] # 큰 세로에 인접한 가로

    # 태양아 그래서 참외밭 면적이 어떻게 되냐
    area = (big_height * big_width) - (small_width * small_height) # 이렇게요

    return K * area # 참외 이만큼 이써

K = int(input())
farm = [list(map(int, input().split())) for _ in range(6)]

result = i_dont_like_my_mothers_son(K, farm)
print(result)

########
# 문제의 포인트!
# 개열받는 작은 사각형의 움직임을 어떻게 식으로 표현할 것인가.
# 개천재 다빈이는 해결하고야 말았다.

# 사실 (큰 사각형 - 작은 사각형) 아이디어는 누구나 떠올렸을 것.
# 그란데 말입니다. 큰 사각형 가로 세로야 젤 긴 인덱스를 찾든, 순수 길이로 따지든 금방 구할 수 있음.
# 하지만 작은 놈이 문제임. 첨엔 무조건 가장 마지막에 나오는 길이 2개가 작은 사각형이라 생각함
# 근데 아닌 거임 띠용
# 다시 생각해보니 작은 사각형의 움직임에 따라 마지막이 작은 사각형 변이 아닐 수 있다는 거.
# 어쩐지 내가 쉽게 풀면 문제 있는 거니까 의심해봐야 함

# 결론
# 작은 사각형의 가로와 세로는 "큰 직사각형을 이루는 두 변과 바로 앞뒤에 위치한 변들로 결정된다"

# 육각형 밭의 특성은 다음과 같음
# 반시계 방향으로 입력되고, 6개의 변이 있으며, 이 변들은 0부터 5까지 인덱스로 표현됨.
# 각 변은 동서남북 중 하나의 방향과 길이를 나타냄.
# 이때, 돌면서 입력되니까 짝수 인덱스는 가로, 홀수 인덱스는 세로를 나타냄

# small_width = L[(max_width_idx + 3) % 6]
# small_height = L[(max_height_idx + 3) % 6]
# 위 코드는 작은 직사각형의 가로 세로를 구하는 코드임.
# 저 두 줄 떠올리는 게 왜 이리 빡센지 모르겠음.
# 가로를 예로 들어보겠음.
# '(max_width_idx + 3) % 6'은 큰 직사각형의 가로에서 3칸 떨어진 변을 찾는 것임.
# 육각형 구조에서 큰 사각형을 구성하는 변의 반대쪽에 위치한 변을 찾아내는 것임.

# 진짜 결론
# 육각형은 총 6개의 변이므로 긴 변에서 3칸 떨어진 변은 작은 사각형의 변이 된다!